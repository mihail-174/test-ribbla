@mixin font-mixin($style, $main-path, $family, $map) {
    $dir-name: $family + "/"; // Генерируем название директории, в которой находится шрифт
    @each $weight, $path in $map {
        @font-face {
            font-display: swap;
            font-family: $family;
            src: url("#{$main-path + $dir-name + $style + $path}.eot");
            src: url("#{$main-path + $dir-name + $style + $path}.eot?#iefix") format("embedded-opentype"),
            url("#{$main-path + $dir-name + $style + $path}.woff2") format("woff2"),
            url("#{$main-path + $dir-name + $style + $path}.woff") format("woff"),
            url("#{$main-path + $dir-name + $style + $path}.ttf") format("truetype"),
            url("#{$main-path + $dir-name + $style + $path}.svg##{$family}") format("svg");
            font-style: $style;
            font-weight: $weight;
        }
    }
}

@mixin placeholder() {
    &::-webkit-input-placeholder {@content;}
    &::-moz-placeholder {@content;}
    &:-moz-placeholder {@content;}
    &:-ms-input-placeholder {@content;}
}

@mixin fontAwesome($code: "", $size: inherit, $weight: 100) {
    content: $code;
    font-family: "Font Awesome 5 Pro";
    font-size: $size;
    font-weight: $weight;
    line-height: 1;
}

@mixin iconmoon($code: "", $size: inherit, $weight: 100) {
    content: $code;
    font-family: "icomoon";
    font-size: $size;
    font-weight: $weight;
    line-height: 1;
}

// REM CONVERT
$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
    @if $separator == "comma" or $separator == "space" {
        @return append($list, null, $separator);
    }

    @if function-exists("list-separator") == true {
        @return list-separator($list);
    }

    // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
    $test-list: ();
    @each $item in $list {
        $test-list: append($test-list, $item, space);
    }

    @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
    font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
    $result: ();
    $separator: rem-separator($values);

    @each $value in $values {
        @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
            $result: append($result, $value / 1rem * $rem-baseline, $separator);
        } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
            $result: append($result, $value / $rem-baseline * 1rem, $separator);
        } @else if type-of($value) == "list" {
            $value-separator: rem-separator($value);
            $value: rem-convert($to, $value...);
            $value: rem-separator($value, $value-separator);
            $result: append($result, $value, $separator);
        } @else {
            $result: append($result, $value, $separator);
        }
    }

    @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
    @if $rem-px-only {
        @return rem-convert(px, $values...);
    } @else {
        @return rem-convert(rem, $values...);
    }
}

@mixin rem($properties, $values...) {
    @if type-of($properties) == "map" {
        @each $property in map-keys($properties) {
            @include rem($property, map-get($properties, $property));
        }
    } @else {
        @each $property in $properties {
            @if $rem-fallback or $rem-px-only {
                #{$property}: rem-convert(px, $values...);
            }
            @if not $rem-px-only {
                #{$property}: rem-convert(rem, $values...);
            }
        }
    }
}

// EM CONVERT
// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
@function em-separator($list) {
    @if function-exists("list-separator") == true {
        @return list-separator($list);
    }

    $test-list: ();
    @each $item in $list {
        $test-list: append($test-list, $item, space);
    }

    @return if($test-list == $list, space, comma);
}
@function em($values...) {
    $context: nth($values, length($values));
    $result: ();
    $separator: em-separator($values);

    @for $i from 1 through length($values) - 1 {
        $value: nth($values, $i);
        @if type-of($value) == "number" and unit($value) == "px" {
            $result: append($result, $value / $context * 1em, $separator);
        } @else if type-of($value) == "list" {
            $result: append($result, em(append($value, $context)...), $separator);
        } @else {
            $result: append($result, $value, $separator);
        }
    }

    @return if(length($result) == 1, nth($result, 1), $result);
}
@mixin em($properties, $context) {
    @each $property in map-keys($properties) {
        #{$property}: em(append(map-get($properties, $property), $context)...);
    }
}